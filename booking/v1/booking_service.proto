syntax = "proto3";

package booking.v1;

option go_package = "github.com/codebind-luna/booking-service/gen/go/booking/v1;bookingpb";

service TicketService {
    rpc PurchaseTicket(PurchaseTicketRequest) returns (PurchaseTicketResponse);
    rpc GetReceipt(GetReceiptRequest) returns (GetReceiptResponse);
    rpc ViewSeatMap(ViewSeatMapRequest) returns (ViewSeatMapResponse);
    rpc RemoveUser(RemoveUserRequest) returns (RemoveUserResponse);
    rpc ModifySeat(ModifySeatRequest) returns(ModifySeatResponse);
}

// Receipt - Message for receipt of purchase ticket
message Receipt {
    string booking_id = 1;   // Booking ID
    string from_city = 2;     // Departure city
    string to_city = 3;       // Destination city
    User user = 4;            // User info
    float price = 5;          // Ticket price
    Section section = 6; // Section of seat allocated
    int32 seat_no = 7; // seat no of seat allocated
}

// GetReceiptRequest - Request message for fetching booking details by email
message GetReceiptRequest {
    string email = 1;
}

// GetReceiptResponse - Response message containing booking details
message GetReceiptResponse {
    bool success = 1;      // Whether the purchase was successful
    string message = 2;    // A message from the server (e.g., confirmation)
    Receipt details = 3;
}

enum Status {
    STATUS_UNSPECIFIED = 0; // Default value
    STATUS_AVAILABLE = 1;
    STATUS_BOOKED = 2;
}

enum Section {
    SECTION_UNSPECIFIED = 0;  // Default value
    SECTION_A = 1;
    SECTION_B = 2;
}

enum Discount {
    DISCOUNT_UNSPECIFIED = 0;
    DISCOUNT_FIVE = 1;
    DISCOUNT_TEN = 2;
}

message Seat{
    string email = 1;
    Section section = 2;
    int32 seat_no = 3;
    Status status = 4;
}

// ViewSeatMapRequest - Message for the view seat map request
message ViewSeatMapRequest{
    Section section = 1; // request to view by section
}

// ViewSeatMapResponse - Message for the view seat map response
message ViewSeatMapResponse {
    bool success = 1;      // Whether the remove was successful
    string message = 2;    // A message from the server
    repeated Seat seats = 3; // seat maps
}

// Message for user information
message User {
    string first_name = 1;
    string last_name =  2;
    string email = 3;
}

// ModifySeatRequest - Message to modify a seat for user request
message ModifySeatRequest{
    string email = 1;
    Section section = 2;
    int32 seat_no = 3;
}

// ModifySeatResponse - Message to modify a seat for user response
message ModifySeatResponse{
    bool success = 1;      // Whether the modify was successful
    string message = 2;    // A message from the server
}

// RemoveUserRequest - Message for remove user from train request
message RemoveUserRequest{
    string email = 1;
}

// RemoveUserResponse - Message for remove user from train response
message RemoveUserResponse{
    bool success = 1;      // Whether the remove was successful
    string message = 2;    // A message from the server
}

// PurchaseTicketRequest - Message for the ticket purchase request
message PurchaseTicketRequest {
    User user = 1;
    string from_city = 2;
    string to_city = 3;
    float price = 4;
    Discount discount = 5;
}

// PurchaseTicketResponse - Message for the ticket purchase response
message PurchaseTicketResponse {
    bool success = 1;      // Whether the purchase was successful
    string message = 2;    // A message from the server (e.g., confirmation)
    string booking_id = 3; // Unique booking ID for the ticket
}

